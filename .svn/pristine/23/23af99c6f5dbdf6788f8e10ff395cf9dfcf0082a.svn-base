package jp.ikisaki.www;

import java.io.IOException;
import java.text.DecimalFormat;
import java.util.List;
import java.util.Locale;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.location.*;
import android.os.Bundle;

import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.*;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.maps.*;
import com.google.android.gms.maps.model.*;
import com.google.android.gms.maps.GoogleMap.*;
//import android.support.v4.app.FragmentActivity;
import android.app.Dialog;
import android.content.Context;
import android.util.Log;


public class SetMapActivity extends Activity implements OnMapClickListener, OnMarkerClickListener {
    GoogleMap mMap= null;
    DecimalFormat df = new DecimalFormat("#.00000");
    private static LatLng SuZhou = new LatLng(31.2653514, 120.7365586);

    private String point = "";
    private int gmapdLatitude = 0;
    private int gmapdLongitude = 0;
    static RegistrationDBAdapter registrationdbAdapter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.set_map);

        setUpMapIfNeeded();
        Spinner spinner = (Spinner) findViewById(R.id.sp_maptype);
        //将可?内容与ArrayAdapter?接起来
        //ArrayAdapter<String> adapter;
        //adapter = new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,stringarray);
        //?置下拉列表的?格
        //adapter.setDropDownViewResource(android.R.layout.simple_list_item_single_choice);
        //将adapter 添加到spinner中
        //spinner.setAdapter(adapter);

        //添加事件Spinner事件?听
        spinner.setOnItemSelectedListener(new SpinnerSelectedListener());
        spinner.setSelection(0, true);

        registrationdbAdapter = new RegistrationDBAdapter(this);
        Intent intent = getIntent();
        if (intent.getStringExtra("keyword").equals("departure")) {
            point = "出発地";
        } else {
            point = "目的地";
        }

        Toast toast = Toast.makeText(SetMapActivity.this, "設定したい" + point
                + "を中心に合わせて下さい", Toast.LENGTH_SHORT);
        toast.setGravity(Gravity.CENTER, 0, 0);
        toast.show();

    }

    private void setUpMapIfNeeded() {
        // Do a null check to confirm that we have not already instantiated the map.
        if (mMap == null) {
            mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.mapview)).getMap();

            // Check if we were successful in obtaining the map.
            if (mMap != null) {
                setUpMap();
                MapsInitializer.initialize(SetMapActivity.this);

            }
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        setUpMapIfNeeded();
    }

    /**
     * This is where we can add markers or lines, add listeners or move the camera. In this case, we
     * just add a marker near Africa.
     * <p>
     * This should only be called once and when we are sure that {@link #mMap} is not null.
     */
    private void setUpMap() {
        mMap.clear();
        //現在地処理
        testLocation();

/*        String title = "??¶?£?" + df.format(SuZhou.latitude) + "\n ??¶?£?" + df.format(SuZhou.longitude);
        CameraPosition suzhou = new CameraPosition.Builder().target(SuZhou).zoom(15.5f).bearing(300).tilt(50).build();
        mMap.addMarker(new MarkerOptions().position(SuZhou).title(title));
        mMap.animateCamera(CameraUpdateFactory.newCameraPosition(suzhou));*/
        mMap.setOnMapClickListener(this);
        mMap.setOnMarkerClickListener(this);
    }

    public void testLocation()
    {
        // Enabling MyLocation Layer of Google Map
        //mMap.getUiSettings().setMyLocationButtonEnabled(true);
        mMap.setMyLocationEnabled(true);
        //mMap.setLocationSource();

        // Getting LocationManager object from System Service LOCATION_SERVICE
        LocationManager locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);

        // Creating a criteria object to retrieve provider
        Criteria criteria = new Criteria();
        criteria.setAccuracy(Criteria.ACCURACY_FINE);
        // Getting the name of the best provider
        String provider = locationManager.getBestProvider(criteria, true);

        // Getting Current Location
        Location location = locationManager.getLastKnownLocation(provider);
        //LocationManager.GPS_PROVIDER
        if(location!=null){
            onLocationChanged(location);
        }
        //locationManager.requestLocationUpdates(provider, 20000, 0, this);
        SuZhou = new LatLng(location.getLatitude(), location.getLongitude());
        //Toast.makeText(this,  "" + location.getLatitude(), Toast.LENGTH_LONG).show();
        String title = getResources().getString(R.string.posion) + "\n 経度：" + df.format(SuZhou.latitude) + "\n 緯度："+ df.format(SuZhou.longitude);
        CameraPosition suzhou = new CameraPosition.Builder().target(SuZhou).zoom(15.5f).bearing(300).tilt(50).build();
        mMap.addMarker(new MarkerOptions().position(SuZhou).title(title)).showInfoWindow();
        //mMap.animateCamera(CameraUpdateFactory.newCameraPosition(suzhou));
    }

    public void onLocationChanged(Location location) {
        // TODO Auto-generated method stub
//		LatLng latLng = new LatLng(location.getLatitude(),
//				location.getLongitude());
//		CameraUpdate cameraUpdate = CameraUpdateFactory.newLatLngZoom(latLng,
//				10);
//		Log.i(TAG, "onLocationChanged");
//
//		mMap.animateCamera(cameraUpdate);
//		locationManager.removeUpdates(this);

        // Getting latitude of the current location
        double latitude = location.getLatitude();

        // Getting longitude of the current location
        double longitude = location.getLongitude();

        // Creating a LatLng object for the current location
        LatLng latLng = new LatLng(latitude, longitude);

        // Showing the current location in Google Map
        mMap.moveCamera(CameraUpdateFactory.newLatLng(latLng));

        // Zoom in the Google Map
        mMap.animateCamera(CameraUpdateFactory.zoomTo(15));
    }


    @Override
    public boolean onMarkerClick(Marker arg0) {
        return false;
    }

    @Override
    public void onMapClick(LatLng point) {
        mMap.clear();
        Geocoder gcoder = new Geocoder(this, Locale.getDefault());
        List<Address> addresses = null;
        double lat = point.latitude;
        double lon = point.longitude;
        DecimalFormat df = new DecimalFormat("#.00000");
        String title = "軽度：" + df.format(lat) + "\n 緯度：" + df.format(lon);
        try {
            addresses = gcoder.getFromLocation(point.latitude, point.longitude, 10);
            if (addresses != null && addresses.size() > 0) {
                Address returnedAddress = addresses.get(1);
                StringBuilder strReturnedAddress = new StringBuilder();
                for (int i = 0; i < returnedAddress.getMaxAddressLineIndex(); i++) {
                    if (i>0) break; //強制１回
                    strReturnedAddress.append(returnedAddress.getMaxAddressLineIndex()>1?
                            returnedAddress.getAddressLine(1):returnedAddress.getLocality()).append("\n");
                    //strReturnedAddress.append(returnedAddress.getAddressLine(i)).append("\n");
                    //strReturnedAddress.append(returnedAddress.getLocality()).append("\n");
                    if (returnedAddress.getPostalCode()!= null && !returnedAddress.getPostalCode().equals(""))
                    strReturnedAddress.append("〒").append(returnedAddress.getPostalCode()).append("\n");
                    //builder.append(address.getCountryName())
                    //0行=国名
                }
                title = strReturnedAddress.toString();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        Marker desmarker;
        desmarker= mMap.addMarker(new MarkerOptions().position(point).title(title)
                .icon(BitmapDescriptorFactory.fromResource(R.drawable.marker))
                .anchor(0.5f, 1.0f) // Anchors the marker on the bottom left
                .draggable(true)
        );

        System.out.println("logcat:point:" + point.latitude +"中心位置緯度" + BasicModel.getDeparture().getLatitude()/360000.0);
        System.out.println("logcat:point:" + point.longitude +"中心位置緯度" + BasicModel.getDeparture().getLongitude()/360000.0);
        // Polylines are useful for marking paths and routes on the map.
        mMap.addPolyline(new PolylineOptions().geodesic(true)
                //.add(new LatLng(BasicModel.getDeparture().getLongitude()/360000.0,BasicModel.getDeparture().getLatitude()/360000.0))
                .add(SuZhou)
                .add(point)
                //.add(new LatLng(-18.142, 178.431))  // Fiji
                //.add(new LatLng(21.291, -157.821))  // Hawaii
        );
    }

//busnet method
protected boolean isRouteDisplayed() {
    return false;
}

    public void onCancel(View view) {
        finish();
    }

public void onGetCenter(View view) {
    //GeoPoint gpo = mview.getMapCenter();
    CameraPosition gpo = mMap.getCameraPosition();
    double latitude = gpo.target.latitude;
    double longitude = gpo.target.longitude;
    // Toast.makeText(this, "中心位置\n緯度" + latitude + "\n経度:" + longitude,
    // Toast.LENGTH_LONG).show();
    //System.out.println("logcat:point:" + "中心位置緯度" + gpo.getLatitudeE6() + "経度:" + gpo.getLongitudeE6());

    double la = latitude;
    double ln = longitude;

//	変更	latitude = la + la * 0.00010696 - ln * 0.000017467 - 0.0046020;
//		longitude = ln + la * 0.000046047 + ln * 0.000083049 - 0.010041;

    gmapdLatitude = (int) (latitude * 1E6 * 0.36);
    gmapdLongitude = (int) (longitude * 1E6 * 0.36);

    if (point.equals("出発地")) {
        BasicModel.resetDeparture();
        PointModel departurePointModel = new PointModel(0, "設定出発地", "",
                gmapdLongitude, gmapdLatitude, 0);
        BasicModel.setDeparture(departurePointModel);
    } else {
        BasicModel.resetDestination();
        PointModel destinationPointModel = new PointModel(0, "設定目的地", "",
                gmapdLongitude, gmapdLatitude, 0);
        BasicModel.setDestination(destinationPointModel);
    }

    Intent intent = new Intent(SetMapActivity.this,
            RouteSearchActivity.class);
    intent.putExtra("keyword", "");
    startActivity(intent);

}

    public void onRegistration(View view) {
        LayoutInflater inflater = LayoutInflater.from(SetMapActivity.this);
        View dialogView = inflater.inflate(R.layout.dialog, null);
        final EditText editText = (EditText) dialogView
                .findViewById(R.id.dialog_editText);

        new AlertDialog.Builder(SetMapActivity.this).setTitle("登録名を入力して下さい。")

                .setView(dialogView)
                .setPositiveButton("決定", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                        //GeoPoint gpo = mview.getMapCenter();
                        CameraPosition gpo = mMap.getCameraPosition();
                        double latitude = gpo.target.latitude;
                        double longitude = gpo.target.longitude;
                        // Toast.makeText(SetMapActivity.this, "中心位置\n緯度" + latitude + "\n経度:" + longitude,
                        // Toast.LENGTH_LONG).show();

                        double la = latitude;
                        double ln = longitude;

//			変更			latitude = la + la * 0.00010696 - ln * 0.000017467 - 0.0046020;
//						longitude = ln + la * 0.000046047 + ln * 0.000083049 - 0.010041;

                        gmapdLatitude = (int) (latitude * 1E6 * 0.36);
                        gmapdLongitude = (int) (longitude * 1E6 * 0.36);

                        if (point.equals("出発地")) {
                            BasicModel.resetDeparture();
                            PointModel departurePointModel = new PointModel(0, editText.getText().toString(), "",
                                    gmapdLongitude, gmapdLatitude, 0);
                            BasicModel.setDeparture(departurePointModel);
                        } else {
                            BasicModel.resetDestination();
                            PointModel destinationPointModel = new PointModel(0, editText.getText().toString(), "",
                                    gmapdLongitude, gmapdLatitude, 0);
                            BasicModel.setDestination(destinationPointModel);
                        }

                        System.out.println("logcat:7:"
                                + editText.getText().toString() + ":" + gmapdLongitude + ":" + gmapdLatitude);

                        int noName = 0;

                        if(editText.getText().toString().equals("")){
                            noName = 1;
                        }

                        int flag = 1;

                        registrationdbAdapter.open();
                        Cursor c = registrationdbAdapter.getAllNotes();
                        if(c.getCount() == 0 && noName == 0){
                            registrationdbAdapter.saveNote(editText.getText().toString(), gmapdLongitude + "," + gmapdLatitude);
                            flag = 1;
                        }
                        startManagingCursor(c);
                        if (c.moveToFirst()) {
                            do {
                                Note note = new Note(c.getInt(c
                                        .getColumnIndex(DBAdapter.COL_ID)), c.getString(c
                                        .getColumnIndex(DBAdapter.COL_NOTE)), c.getString(c
                                        .getColumnIndex(DBAdapter.COL_LASTUPDATE)));
                                if(note.getNote().equals(editText.getText().toString())){
                                    //registrationdbAdapter.deleteNote(note.getId());
                                    flag = 0;
                                }
                            } while (c.moveToNext());
                            if(flag == 1 && noName == 0){
                                registrationdbAdapter.saveNote(editText.getText().toString(), gmapdLongitude + "," + gmapdLatitude);
                            }

                        }
                        stopManagingCursor(c);
                        registrationdbAdapter.close();


                        if(noName == 1){
                            Toast toast = Toast.makeText(SetMapActivity.this, "文字が入力されていません。" + "\n" + "名称を入力して再登録して下さい。", Toast.LENGTH_SHORT);
                            toast.setGravity(Gravity.CENTER, 0, 0);
                            toast.show();
                        }
                        else if(flag == 1){
                            Toast toast = Toast.makeText(SetMapActivity.this, "「"
                                    + editText.getText().toString() + "」" + "\n"
                                    + "を登録しました。", Toast.LENGTH_SHORT);
                            toast.setGravity(Gravity.CENTER, 0, 0);
                            toast.show();
                            Intent intent = new Intent(SetMapActivity.this,
                                    RouteSearchActivity.class);
                            intent.putExtra("keyword", "");
                            startActivity(intent);
                        }
                        else{
                            Toast toast = Toast.makeText(SetMapActivity.this, "既にその名前は使われています。" + "\n" + "別の名前を入力して下さい。", Toast.LENGTH_SHORT);
                            toast.setGravity(Gravity.CENTER, 0, 0);
                            toast.show();
                        }
                    }
                }).show();
    }


    public class SpinnerSelectedListener implements AdapterView.OnItemSelectedListener {
        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
            switch (position) {
                case 0:
                    mMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);
                    break;
                case 1:
                    mMap.setMapType(GoogleMap.MAP_TYPE_TERRAIN);
                    break;
                case 2:
                    mMap.setMapType(GoogleMap.MAP_TYPE_HYBRID);
                    break;
                case 3:
                    mMap.setMapType(GoogleMap.MAP_TYPE_SATELLITE);
                    break;
                default:
                    mMap.setMapType(GoogleMap.MAP_TYPE_NONE);
                    break;
            }
            //Toast.makeText(TestActivity.this, "分享", Toast.LENGTH_SHORT).show();
        }

        public void onNothingSelected(AdapterView<?> arg0) {
        }
    }
}
