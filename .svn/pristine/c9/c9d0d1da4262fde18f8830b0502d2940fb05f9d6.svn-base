package jp.ikisaki.www;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.security.acl.LastOwnerException;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Color;
import android.os.Bundle;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnCreateContextMenuListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

public class SettingTab2Activity  extends Activity implements
		OnClickListener {

	static final String TAG = "SQLiteTest1";
	static final int MENUITEM_ID_DELETE = 1;
	ListView itemListView;
	EditText noteEditText;
	Button saveButton;
	static RegistrationDBAdapter registrationdbAdapter;
	static NoteListAdapter listAdapter;
	static List<Note> noteList = new ArrayList<Note>();
	static String type = "";

	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setContentView(R.layout.setting_tab2);

		Toast toast = Toast.makeText(SettingTab2Activity.this, "地図から登録した点は青文字で表示しています。", Toast.LENGTH_SHORT);
		toast.setGravity(Gravity.CENTER, 0, 0);
		toast.show();

		Toast toast2 = Toast.makeText(SettingTab2Activity.this, "登録地点を削除したい場合は項目を長押しして下さい。", Toast.LENGTH_SHORT);
		toast2.setGravity(Gravity.BOTTOM, 0, 0);
		toast2.show();

		findViews();
		setListeners();

		registrationdbAdapter = new RegistrationDBAdapter(this);
		listAdapter = new NoteListAdapter();
		itemListView.setAdapter(listAdapter);

		loadNote();
	}

	protected void findViews() {
		itemListView = (ListView) findViewById(R.id.itemListView);
//		noteEditText = (EditText) findViewById(R.id.memoEditText);
//		saveButton = (Button) findViewById(R.id.saveButton);
	}

	protected void loadNote() {
		noteList.clear();

		// Read
		registrationdbAdapter.open();
		Cursor c = registrationdbAdapter.getAllNotes();

		startManagingCursor(c);

		if (c.moveToFirst()) {

			do {
				Note note = new Note(c.getInt(c
						.getColumnIndex(DBAdapter.COL_ID)), c.getString(c
						.getColumnIndex(DBAdapter.COL_NOTE)), c.getString(c
						.getColumnIndex(DBAdapter.COL_LASTUPDATE)));

					noteList.add(0, note);

			} while (c.moveToNext());
		}

		stopManagingCursor(c);
		registrationdbAdapter.close();

		listAdapter.notifyDataSetChanged();
	}

	protected void saveItem() {
		registrationdbAdapter.open();
		registrationdbAdapter.saveNote(noteEditText.getText().toString(), "kon");
		registrationdbAdapter.close();
		noteEditText.setText("");
		loadNote();
	}

	protected void setListeners() {
		//saveButton.setOnClickListener(this);

		itemListView
				.setOnCreateContextMenuListener(new OnCreateContextMenuListener() {
					@Override
					public void onCreateContextMenu(ContextMenu menu, View v,
							ContextMenuInfo menuInfo) {
						menu.add(0, MENUITEM_ID_DELETE, 0, "削除");
					}
				});

		itemListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
	        @Override
	        public void onItemClick(AdapterView<?> parent, View view, final int position, long id) {

	            final String tempNote = noteList.get(position).getNote();
	            final String tempLastupdate = noteList.get(position).getLastupdate();
//	            registrationdbAdapter.open();
//	            registrationdbAdapter.deleteNote(noteList.get(position).getId());
//	            registrationdbAdapter.close();
//
//	            registrationdbAdapter.open();
//	            registrationdbAdapter.saveNote(tempNote, tempLastupdate);
//	            registrationdbAdapter.close();

	            System.out.println("logcat:8:" + noteList.get(position).getNote() + ":" + noteList.get(position).getLastupdate());


	            if(noteList.get(position).getLastupdate().indexOf(",") != -1){
	            	new AlertDialog.Builder(SettingTab2Activity.this)
	            	 .setMessage(noteList.get(position).getNote())
	            	 .setCancelable(false)
	            	 .setPositiveButton("名称変更", new DialogInterface.OnClickListener() {
	            	     public void onClick(DialogInterface dialog, int id) {
	            	    	 LayoutInflater inflater = LayoutInflater.from(SettingTab2Activity.this);
	     	            	View dialogView = inflater.inflate(R.layout.dialog, null);
	     	            	final EditText editText = (EditText) dialogView
	     	            	.findViewById(R.id.dialog_editText);
	     	            	editText.setText(tempNote);

	     	            	new AlertDialog.Builder(SettingTab2Activity.this).setTitle("新しい登録名を入力して下さい。")

	     	            	.setView(dialogView)
	     	            	.setPositiveButton("決定", new DialogInterface.OnClickListener() {
	     	            		@Override
	     	            		public void onClick(DialogInterface dialog, int which) {

	     	            			int flag = 1;

	     	            			registrationdbAdapter.open();
	     	            			Cursor c = registrationdbAdapter.getAllNotes();
//	     							if(c.getCount() == 0){
//	     							registrationdbAdapter.saveNote(editText.getText().toString(), gmapdLongitude + "," + gmapdLatitude);
//	     							flag = 1;
//	     						}
	     	            			startManagingCursor(c);
	     	            			if (c.moveToFirst()) {
	     	            				do {
	     	            					Note note = new Note(c.getInt(c
	     	            							.getColumnIndex(DBAdapter.COL_ID)), c.getString(c
	     	            									.getColumnIndex(DBAdapter.COL_NOTE)), c.getString(c
	     	            											.getColumnIndex(DBAdapter.COL_LASTUPDATE)));
	     	            					if(note.getNote().equals(editText.getText().toString())){
	     	            						//registrationdbAdapter.deleteNote(note.getId());
	     	            						flag = 0;
	     	            					}
	     	            				} while (c.moveToNext());
	     	            				if(flag == 1){
	     	            					registrationdbAdapter.deleteNote(noteList.get(position).getId());
	     	            					registrationdbAdapter.saveNote(editText.getText().toString(), tempLastupdate);
	     	            				}

	     	            			}
	     	            			stopManagingCursor(c);
	     	            			registrationdbAdapter.close();

	     	            			if(flag == 1){
	     	            				Toast toast = Toast.makeText(SettingTab2Activity.this, "登録名を「"
	     	            						+ editText.getText().toString() + "」" + "\n"
	     	            						+ "に変更しました。", Toast.LENGTH_SHORT);
	     	            				toast.setGravity(Gravity.CENTER, 0, 0);
	     	            				toast.show();

	     	            				loadNote();

	     	            			}
	     	            			else{
	     	            				Toast toast = Toast.makeText(SettingTab2Activity.this, "既にその名前は使われています。" + "\n" + "別の名前を入力して下さい。", Toast.LENGTH_SHORT);
	     	            				toast.setGravity(Gravity.CENTER, 0, 0);
	     	            				toast.show();
	     	            			}
	     	            		}
	     	            	}).show();
	            	    }
	            	})

	            	.setNegativeButton("地図表示", new DialogInterface.OnClickListener() {
	            	    public void onClick(DialogInterface dialog, int id) {
	            	    	Intent intent = new Intent(SettingTab2Activity.this,
	    	            			ShowMapByMapActivity.class);
	    	            	intent.putExtra("keyword", tempNote + "$" + tempLastupdate);

	    	            	startActivity(intent);
	            	    }
	            	})
	            	.show();




	            }
	            else{
	            	int landmarkLatitude = 0;
	            	int landmarkLongitude = 0;

	            	System.out.println("logcat:2: " + tempLastupdate);

	            	InputStream is = null;
	        		BufferedReader br = null;

	        		final ArrayList<LandmarkModel> landmarkArray = new ArrayList<LandmarkModel>();

	        		final StringBuilder sb = new StringBuilder();
	        		try {
	        			try {
	        				is = getAssets().open("landmark.csv");
	        				br = new BufferedReader(new InputStreamReader(is));

	        				String str;
	        				while ((str = br.readLine()) != null) {
	        					sb.append(str + "\n");

	        					StringTokenizer st = new StringTokenizer(str, ",");

	        					int i = 0;
	        					int hit = 0;

	        					int id_num = 0;
	        					String name = "";
	        					String yomi = "";
	        					int longitude = 0;
	        					int latitude = 0;
	        					int frequency = 0;

	        					while (st.hasMoreTokens()) {
	        						i++;
	        						if (i == 1) {
	        							id_num = Integer.valueOf(st.nextToken());

	        							if(id_num == Integer.valueOf(tempLastupdate)){
	        								System.out.println("logcat:2: " + id_num);
	        								hit = 1;
	        							}
	        						} else if (i == 2) {
	        							name = st.nextToken();
	        						} else if (i == 3){
	        							yomi = st.nextToken();
	        						} else if (i == 4) {
	        							longitude = Integer.valueOf(st.nextToken());
	        							if(hit == 1){
	        								landmarkLongitude = longitude;
	        							}
	        						} else if (i == 5) {
	        							latitude = Integer.valueOf(st.nextToken());
	        							if(hit == 1){
	        								landmarkLatitude = latitude;
	        							}
	        						} else if (i == 6) {
	        							frequency = Integer.valueOf(st.nextToken());

	        							i = 0;
	        							hit = 0;
	        						}
	        					}
	        				}

	        			} finally {
	        				if (br != null) {
	        					br.close();
	        				}
	        			}
	        		} catch (IOException e) {

	        		}

	        		System.out.println("logcat:2: longitude : latitude : " + landmarkLongitude + " : " + landmarkLatitude);
	        		Intent intent = new Intent(SettingTab2Activity.this,
	            			ShowMapActivity.class);



	            	intent.putExtra("keyword", tempNote + "$" + landmarkLatitude + "," + landmarkLongitude);

	            	startActivity(intent);

	            }

	        }
	    });
	}

	@Override
	public boolean onContextItemSelected(MenuItem item) {

		switch (item.getItemId()) {
		case MENUITEM_ID_DELETE:
			AdapterView.AdapterContextMenuInfo menuInfo = (AdapterView.AdapterContextMenuInfo) item
					.getMenuInfo();

			Note note = noteList.get(menuInfo.position);
			final int noteId = note.getId();

			new AlertDialog.Builder(this)
					.setIcon(R.drawable.icon)
					.setTitle("本当に削除してもよろしいですか?")
					.setPositiveButton("はい",
							new DialogInterface.OnClickListener() {
								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									registrationdbAdapter.open();
									if (registrationdbAdapter.deleteNote(noteId)) {
										Toast.makeText(
												getBaseContext(),
												"The note was successfully deleted.",
												Toast.LENGTH_SHORT);
										loadNote();
									}
									registrationdbAdapter.close();
								}
							}).setNegativeButton("いいえ", null).show();

			return true;
		}
		return super.onContextItemSelected(item);
	}

	@Override
	public void onClick(View v) {
//		switch (v.getId()) {
//		case R.id.saveButton:
//			saveItem();
//			break;
//		}

	}

	private class NoteListAdapter extends BaseAdapter {

		@Override
		public int getCount() {
			return noteList.size();
		}

		@Override
		public Object getItem(int position) {
			return noteList.get(position);
		}

		@Override
		public long getItemId(int position) {
			return position;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			TextView noteTextView;
			TextView lastupdateTextView;
			View v = convertView;
			if (v == null) {
				LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
				v = inflater.inflate(R.layout.row, null);
			}
			Note note = (Note) getItem(position);
			if (note != null) {
				noteTextView = (TextView) v.findViewById(R.id.noteTextView);
				lastupdateTextView = (TextView) v
						.findViewById(R.id.lastupdateTextView);
				noteTextView.setText(note.getNote());

				System.out.println("logcat:8:inside");

				if(note.getLastupdate().indexOf(",") != -1){
					noteTextView.setTextColor(Color.BLUE);
				}
				else{
					noteTextView.setTextColor(Color.BLACK);
				}

				lastupdateTextView.setText(note.getLastupdate());
				//変えたv.setTag(R.id.noteTextView, note);
			}
			return v;
		}

	}

}
