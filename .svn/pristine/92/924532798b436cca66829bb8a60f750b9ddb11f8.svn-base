package jp.ikisaki.www;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.speech.RecognizerIntent;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.TextView;
import android.widget.Toast;

public class SpecifyPointActivity extends Activity implements
		TextView.OnEditorActionListener, LocationListener{
	/** Called when the activity is first created. */
	private static final int REQUEST_CODE = 1;
	private String data = "";
	private LocationManager manager = null;
	private double currentLatitude = 0.0;
	private double currentLongitude = 0.0;
	private int around = 0;
	private int flag = 0;
	private int aroundFlag = 0;

	static DBAdapter dbAdapter;

	ArrayList<LandmarkModel> landmarkArray = new ArrayList<LandmarkModel>();

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.specify_point);

		dbAdapter = new DBAdapter(this);

		manager = (LocationManager)getSystemService(Context.LOCATION_SERVICE);

		Criteria criteria = new Criteria();
		criteria.setAccuracy(Criteria.ACCURACY_COARSE);
		criteria.setPowerRequirement(Criteria.POWER_LOW);
		String provider = manager.getBestProvider(criteria, true);
		manager.requestLocationUpdates(provider, 100000, 0, this);

		Intent intent = getIntent();
		data = intent.getStringExtra("keyword");
		System.out.println("logcat:" + data);

		Button homeButton = (Button) findViewById(R.id.close_button);
		homeButton.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				finish();
			}
		});

		TextView selectARideBusStopText = (TextView) findViewById(R.id.specify_point_textView);
		selectARideBusStopText.setText(data.equals("departure") ? "出発地" : "目的地");

		Button gpsMapButton = (Button) findViewById(R.id.gps_map_button);
		gpsMapButton.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				Intent intent = new Intent(SpecifyPointActivity.this,
						CurrentPositionActivity.class);
				intent.putExtra("keyword", data);
				startActivity(intent);
			}
		});

		EditText exploreEditText = (EditText) findViewById(R.id.specify_point_edittext);
		exploreEditText.setImeOptions(DEFAULT_KEYS_SEARCH_LOCAL);
		exploreEditText.setOnEditorActionListener(this);
		exploreEditText
				.setOnFocusChangeListener(new View.OnFocusChangeListener() {

					@Override
					public void onFocusChange(View v, boolean hasFocus) {
						InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
						imm.hideSoftInputFromWindow(v.getWindowToken(),
								InputMethodManager.HIDE_NOT_ALWAYS);

					}
				});

		Button exploreButton = (Button) findViewById(R.id.explore_button);
		exploreButton.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				EditText exploreEditText = (EditText) findViewById(R.id.specify_point_edittext);
				String exploreString = exploreEditText.getText().toString();
				examinLandmark(exploreString);
			}
		});

		ImageButton voiceButton = (ImageButton) findViewById(R.id.mike_imgbtn);
		voiceButton.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				try{
					Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
					intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
					intent.putExtra(RecognizerIntent.EXTRA_PROMPT, "音声を入力してください。");
					startActivityForResult(intent, REQUEST_CODE);
				}
				catch(ActivityNotFoundException e){
					Toast.makeText(SpecifyPointActivity.this, "Not found", Toast.LENGTH_LONG).show();
				}
			}
		});

		Button setMapButton = (Button)findViewById(R.id.set_map_button);
		setMapButton.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				Intent intent = new Intent(SpecifyPointActivity.this,
						SetMapActivity.class);
				intent.putExtra("keyword", data);
				startActivity(intent);
			}
		});

		final AlertDialog.Builder alert = new AlertDialog.Builder(this);
		final AlertDialog.Builder alertDialog = new AlertDialog.Builder(this);
		Button setAroundButton = (Button)findViewById(R.id.around_button);
		setAroundButton.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				if(around == 1){
					String landmarkOfTheCandidate[] = new String[landmarkArray.size()];
					for (int i = 0; i < landmarkArray.size(); i++) {
						landmarkOfTheCandidate[i] = landmarkArray.get(i).getName();
					}

					if (landmarkArray.size() != 0) {
						//AlertDialog.Builder alert = new AlertDialog.Builder(this);
						alert.setTitle("候補から選択して下さい。\n(通常モード)");
						Toast toast = Toast.makeText(SpecifyPointActivity.this, "登録を行いたい場合は\nモードを切り替えて下さい", Toast.LENGTH_SHORT);
						toast.setGravity(Gravity.BOTTOM, 0, 0);
						toast.show();
						aroundFlag = 0;
						alert.setPositiveButton("モード切り替え", new DialogInterface.OnClickListener() {
					        public void onClick(DialogInterface dialog,int whichButton) {
					        	Toast toast = Toast.makeText(
										SpecifyPointActivity.this,
										"モードを切り替えました", Toast.LENGTH_SHORT);

								toast.setGravity(Gravity.TOP, 0, 0);
								toast.show();

								String tmp = "";
								if(aroundFlag == 0){
									tmp = "登録";
									aroundFlag = 1;
								}
								else{
									tmp = "通常";
									aroundFlag = 0;
								}
					            alert.show().setTitle("候補から選択して下さい。\n(" + tmp + "モード)");
					        }
						});
						alert.setItems(landmarkOfTheCandidate,
								new DialogInterface.OnClickListener() {

									@Override
									public void onClick(DialogInterface dialog, int idx) {
										if(aroundFlag == 1){

									        final int tmp = idx;

									        if(data.equals("departure")){
												Intent intent = new Intent(SpecifyPointActivity.this,
														ShowMapRegistrationActivity.class);
												intent.putExtra("keyword", landmarkArray.get(tmp).getName() + "&" + landmarkArray.get(tmp).getId() + "$" + landmarkArray.get(tmp).getLatitude() + "," + landmarkArray.get(tmp).getLongitude());

												startActivity(intent);

											}
											else{
												Intent intent = new Intent(SpecifyPointActivity.this,
														ShowMapRegistrationDestinationActivity.class);
												intent.putExtra("keyword", landmarkArray.get(tmp).getName() + "&" + landmarkArray.get(tmp).getId() + "$" + landmarkArray.get(tmp).getLatitude() + "," + landmarkArray.get(tmp).getLongitude());

												startActivity(intent);
											}

										}
										else{
											if(data.equals("departure")){
												PointModel departureModel = new PointModel(landmarkArray.get(idx).getId(), landmarkArray.get(idx).getName(),
														landmarkArray.get(idx).getYomi(), landmarkArray.get(idx).getLongitude(), landmarkArray.get(idx).getLatitude(), landmarkArray.get(idx).getFrequency());

												BasicModel.setDeparture(departureModel);
											}
											else{
												PointModel destinationModel = new PointModel(landmarkArray.get(idx).getId(), landmarkArray.get(idx).getName(),
														landmarkArray.get(idx).getYomi(), landmarkArray.get(idx).getLongitude(), landmarkArray.get(idx).getLatitude(), landmarkArray.get(idx).getFrequency());

												BasicModel.setDestination(destinationModel);
											}

											dbAdapter.open();
											Cursor c = dbAdapter.getAllNotes();
											if(c.getCount() == 0){
												dbAdapter.saveNote(landmarkArray.get(idx).getName(), String.valueOf(landmarkArray.get(idx).getId()));
											}
											startManagingCursor(c);
											if (c.moveToFirst()) {
												do {
													Note note = new Note(c.getInt(c
															.getColumnIndex(DBAdapter.COL_ID)), c.getString(c
																	.getColumnIndex(DBAdapter.COL_NOTE)), c.getString(c
																			.getColumnIndex(DBAdapter.COL_LASTUPDATE)));
													if(note.getNote().equals(landmarkArray.get(idx).getName())){
														dbAdapter.deleteNote(note.getId());
													}
												} while (c.moveToNext());
												dbAdapter.saveNote(landmarkArray.get(idx).getName(), String.valueOf(landmarkArray.get(idx).getId()));
											}
											stopManagingCursor(c);
											dbAdapter.close();

											Intent intent = new Intent(SpecifyPointActivity.this, RouteSearchActivity.class);
											intent.putExtra("keyword", "");
											startActivity(intent);
										}
									}
								});

								////////////



								///////////
						alert.show();
					}
				}
				else{
					Toast.makeText(SpecifyPointActivity.this, "位置制度が安定するまでお待ちください", Toast.LENGTH_LONG).show();
				}
			}
		});
	}



	public void examinLandmark(String exploreString){
		InputStream is = null;
		BufferedReader br = null;
		// String sample = "とっとりよしなりてん";


		final ArrayList<LandmarkModel> landmarkArray = new ArrayList<LandmarkModel>();

		final StringBuilder sb = new StringBuilder();
		try {
			try {
				is = getAssets().open("landmark.csv");
				br = new BufferedReader(new InputStreamReader(is));

				String str;
				while ((str = br.readLine()) != null) {
					sb.append(str + "\n");

					StringTokenizer st = new StringTokenizer(str, ",");

					int i = 0;
					int hit = 0;

					int id = 0;
					String name = "";
					String yomi = "";
					int longitude = 0;
					int latitude = 0;
					int frequency = 0;

					while (st.hasMoreTokens()) {
						i++;
						if (i == 1) {
							id = Integer.valueOf(st.nextToken());
						} else if (i == 2) {
							name = st.nextToken();

							if (name.indexOf(exploreString) != -1) {

								hit = 1;

								yomi = st.nextToken();

							} else {
								yomi = st.nextToken();

								if (yomi.indexOf(exploreString) != -1) {

									hit = 1;
								}
							}
						} else if (i == 4) {
							longitude = Integer.valueOf(st.nextToken());
						} else if (i == 5) {
							latitude = Integer.valueOf(st.nextToken());
						} else if (i == 6) {
							frequency = Integer.valueOf(st.nextToken());

							if (hit == 1) {
								LandmarkModel landmarkModel = new LandmarkModel(
										id, name, yomi, longitude,
										latitude, frequency);

								if (landmarkArray.size() == 0) {
									landmarkArray.add(landmarkModel);
								} else {
									int k = landmarkArray.size();
									for (int j = 0; j < k; j++) {

										if (landmarkModel.getFrequency() > landmarkArray
												.get(j).getFrequency()) {
											landmarkArray.add(j,
													landmarkModel);
											hit = 0;
											break;
										}
									}
									if (hit == 1) {
										landmarkArray.add(landmarkModel);
									}
								}
							}

							i = 0;
							hit = 0;
						}
					}
				}

			} finally {
				if (br != null) {
					br.close();
				}
			}
		} catch (IOException e) {

		}

		String landmarkOfTheCandidate[] = new String[landmarkArray.size()];
		for (int i = 0; i < landmarkArray.size(); i++) {
			landmarkOfTheCandidate[i] = landmarkArray.get(i).getName();
		}

		if (landmarkArray.size() != 0) {
			final AlertDialog.Builder alert = new AlertDialog.Builder(this);

			flag = 0;
			alert.setTitle("候補から選択して下さい。\n(通常モード)");

			Toast toast = Toast.makeText(SpecifyPointActivity.this, "登録を行いたい場合は\nモードを切り替えて下さい", Toast.LENGTH_SHORT);
			toast.setGravity(Gravity.BOTTOM, 0, 0);
			toast.show();

			alert.setPositiveButton("モード切り替え", new DialogInterface.OnClickListener() {
		        public void onClick(DialogInterface dialog,int whichButton) {
		        	Toast toast = Toast.makeText(
							SpecifyPointActivity.this,
							"モードを切り替えました", Toast.LENGTH_SHORT);

					toast.setGravity(Gravity.TOP, 0, 0);
					toast.show();

					String tmp = "";
					if(flag == 0){
						tmp = "登録";
						flag = 1;
					}
					else{
						tmp = "通常";
						flag = 0;
					}
		            alert.show().setTitle("候補から選択して下さい。\n(" + tmp + "モード)");
		        }
			});



			alert.setItems(landmarkOfTheCandidate,
					new DialogInterface.OnClickListener() {

						@Override
						public void onClick(DialogInterface dialog, int idx) {
							if(flag == 1){

								final int tmp = idx;

								if(data.equals("departure")){
									Intent intent = new Intent(SpecifyPointActivity.this,
											ShowMapRegistrationActivity.class);
									intent.putExtra("keyword", landmarkArray.get(tmp).getName() + "&" + landmarkArray.get(tmp).getId() + "$" + landmarkArray.get(tmp).getLatitude() + "," + landmarkArray.get(tmp).getLongitude());

									startActivity(intent);

								}
								else{
									Intent intent = new Intent(SpecifyPointActivity.this,
											ShowMapRegistrationDestinationActivity.class);
									intent.putExtra("keyword", landmarkArray.get(tmp).getName() + "&" + landmarkArray.get(tmp).getId() + "$" + landmarkArray.get(tmp).getLatitude() + "," + landmarkArray.get(tmp).getLongitude());

									startActivity(intent);
								}



							}
							else{
								if(data.equals("departure")){
									PointModel departureModel = new PointModel(landmarkArray.get(idx).getId(), landmarkArray.get(idx).getName(),
											landmarkArray.get(idx).getYomi(), landmarkArray.get(idx).getLongitude(), landmarkArray.get(idx).getLatitude(), landmarkArray.get(idx).getFrequency());

									BasicModel.setDeparture(departureModel);
								}
								else{
									PointModel destinationModel = new PointModel(landmarkArray.get(idx).getId(), landmarkArray.get(idx).getName(),
											landmarkArray.get(idx).getYomi(), landmarkArray.get(idx).getLongitude(), landmarkArray.get(idx).getLatitude(), landmarkArray.get(idx).getFrequency());

									BasicModel.setDestination(destinationModel);
								}

								dbAdapter.open();
								Cursor c = dbAdapter.getAllNotes();
								if(c.getCount() == 0){
									dbAdapter.saveNote(landmarkArray.get(idx).getName(), String.valueOf(landmarkArray.get(idx).getId()));
								}
								startManagingCursor(c);
								if (c.moveToFirst()) {
									do {
										Note note = new Note(c.getInt(c
												.getColumnIndex(DBAdapter.COL_ID)), c.getString(c
														.getColumnIndex(DBAdapter.COL_NOTE)), c.getString(c
																.getColumnIndex(DBAdapter.COL_LASTUPDATE)));
										if(note.getNote().equals(landmarkArray.get(idx).getName())){
											dbAdapter.deleteNote(note.getId());
										}
									} while (c.moveToNext());
									System.out.println("logcat:5:ok");
									dbAdapter.saveNote(landmarkArray.get(idx).getName(), String.valueOf(landmarkArray.get(idx).getId()));
								}
								stopManagingCursor(c);
								dbAdapter.close();



								Intent intent = new Intent(SpecifyPointActivity.this, RouteSearchActivity.class);
								intent.putExtra("keyword", "");
								startActivity(intent);
							}
						}
					});

			//

			//


			alert.show();
		} else {
			Toast toast = Toast.makeText(
					SpecifyPointActivity.this,
					"該当するランドマークが存在しません．", Toast.LENGTH_LONG);

			toast.setGravity(Gravity.TOP, 0, 250);

			toast.show();
		}
	}

	public boolean examineLandmark(int actionId, KeyEvent event){
		if (event == null && actionId == 6 || event != null
				&& event.getKeyCode() == KeyEvent.KEYCODE_ENTER) {
			EditText exploreEditText = (EditText) findViewById(R.id.specify_point_edittext);
			String exploreString = exploreEditText.getText().toString();
			examinLandmark(exploreString);
		}
		return false;
	}

	@Override
	public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {

		examineLandmark(actionId, event);

		return false;
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data){
		String input = "";
		super.onActivityResult(requestCode, resultCode, data);

		if(requestCode == REQUEST_CODE && resultCode == RESULT_OK){
			ArrayList<String> candidates = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);

			if(candidates.size() > 0){
				input = candidates.get(0);
				Toast.makeText(SpecifyPointActivity.this, input, Toast.LENGTH_LONG).show();
				examinLandmark(input);
			}
		}
	}


	@Override
	protected void onPause(){
		if(manager != null){
			manager.removeUpdates(this);
		}
		super.onPause();
	}

	@Override
	protected void onResume(){
		System.out.println("logcat::onresume");
		if(manager != null){
			System.out.println("logcat::null");
			manager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 60000, 0, this);
		}
		super.onResume();
	}

	@Override
	public void onLocationChanged(Location location) {

		currentLatitude = location.getLatitude();
		currentLongitude = location.getLongitude();

		setAround(currentLatitude, currentLongitude);
		//around = 1;
	}

	public void setAround(double currentLatitude, double currentLongitude){
		double currentJapLongitude = currentLongitude;
		double currentJapLatitude = currentLatitude;


		currentJapLatitude = currentJapLatitude + currentJapLatitude * 0.00010696 - currentJapLongitude * 0.000017467 - 0.0046020;
		currentJapLongitude = currentJapLongitude + currentJapLatitude * 0.000046047 + currentJapLongitude * 0.000083049 - 0.010041;


		InputStream is = null;
		BufferedReader br = null;

		final ArrayList<LandmarkModel> aroundLandmarkArray = new ArrayList<LandmarkModel>();

		final StringBuilder sb = new StringBuilder();
		try {
			try {
				is = getAssets().open("landmark.csv");
				br = new BufferedReader(new InputStreamReader(is));

				String str;
				while ((str = br.readLine()) != null) {
					sb.append(str + "\n");

					StringTokenizer st = new StringTokenizer(str, ",");

					int i = 0;

					int id = 0;
					String name = "";
					String yomi = "";
					int longitude = 0;
					int latitude = 0;
					int frequency = 0;

					while (st.hasMoreTokens()) {
						i++;
						if (i == 1) {
							id = Integer.valueOf(st.nextToken());
						} else if (i == 2) {
							name = st.nextToken();
						}
						else if(i == 3){
							yomi = st.nextToken();
						} else if (i == 4) {
							longitude = Integer.valueOf(st.nextToken());
						} else if (i == 5) {
							latitude = Integer.valueOf(st.nextToken());
						} else if (i == 6) {
							frequency = Integer.valueOf(st.nextToken());

							LandmarkModel aroundLandmarkModel = new LandmarkModel(
									id, name, yomi, longitude,
									latitude, frequency);

							if (aroundLandmarkArray.size() == 0) {
								System.out.println("logcat::dame");
								aroundLandmarkArray.add(aroundLandmarkModel);
							}
							else {
								int k = aroundLandmarkArray.size();


								for (int j = 0; j < k && j < 5; j++) {
									if(aroundLandmarkModel.getFrequency() > 10){
										float[] preResult = new float[3];
										Location.distanceBetween((double)aroundLandmarkArray.get(j).getLongitude() / 1E6 / 0.36, (double)aroundLandmarkArray.get(j).getLatitude() / 1E6 / 0.36,
												currentJapLatitude, currentJapLongitude, preResult);

										float[] currentResult = new float[3];
										Location.distanceBetween((double)aroundLandmarkModel.getLongitude() / 1E6 / 0.36, (double)aroundLandmarkModel.getLatitude() / 1E6 / 0.36,
												currentJapLatitude, currentJapLongitude, currentResult);


										if (currentResult[0] < preResult[0]) {

											aroundLandmarkArray.add(j,aroundLandmarkModel);
											i = 0;
											j = k;
										}
									}
								}
								i = 0;
							}

						}


					}

				}
				around = 1;

			} finally {

				if (br != null) {
					br.close();
				}
			}
		} catch (IOException e) {

		}

//		System.out.println("logcat::" + aroundLandmarkArray.get(0).getName());
//		System.out.println("logcat::" + aroundLandmarkArray.get(1).getName());
//		System.out.println("logcat::" + aroundLandmarkArray.get(2).getName());
//		System.out.println("logcat::" + aroundLandmarkArray.get(3).getName());
//		System.out.println("logcat::" + aroundLandmarkArray.get(4).getName());

		landmarkArray.clear();
		landmarkArray = aroundLandmarkArray;

//		String landmarkOfTheCandidate[] = new String[aroundLandmarkArray.size()];
//		for (int i = 0; i < aroundLandmarkArray.size(); i++) {
//			landmarkOfTheCandidate[i] = aroundLandmarkArray.get(i).getName();
//		}

//		if (aroundLandmarkArray.size() != 0) {
//			AlertDialog.Builder alert = new AlertDialog.Builder(this);
//			alert.setTitle("候補から選択してください．");
//			alert.setItems(landmarkOfTheCandidate,
//					new DialogInterface.OnClickListener() {
//
//						@Override
//						public void onClick(DialogInterface dialog, int idx) {
//							if(data.equals("departure")){
//								PointModel departureModel = new PointModel(aroundLandmarkArray.get(idx).getId(), aroundLandmarkArray.get(idx).getName(),
//										aroundLandmarkArray.get(idx).getYomi(), aroundLandmarkArray.get(idx).getLongitude(), aroundLandmarkArray.get(idx).getLatitude(), aroundLandmarkArray.get(idx).getFrequency());
//
//								BasicModel.setDeparture(departureModel);
//							}
//							else{
//								PointModel destinationModel = new PointModel(aroundLandmarkArray.get(idx).getId(), aroundLandmarkArray.get(idx).getName(),
//										aroundLandmarkArray.get(idx).getYomi(), aroundLandmarkArray.get(idx).getLongitude(), aroundLandmarkArray.get(idx).getLatitude(), aroundLandmarkArray.get(idx).getFrequency());
//
//								BasicModel.setDestination(destinationModel);
//							}
//
//							Intent intent = new Intent(SpecifyPointActivity.this, RouteSearchActivity.class);
//							startActivity(intent);
//						}
//					});
//			alert.show();
//		}

	}

	@Override
	public void onProviderDisabled(String provider) {
	}



	@Override
	public void onProviderEnabled(String provider) {
	}



	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
	}
}